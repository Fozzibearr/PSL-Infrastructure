{
    "Behavioral-Responses": {
        "name": {
            "value": "Behavioral-Responses",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>Partial-equilibrium behavioral-responses module that works with Tax-Calculator</p>"
        },
        "key_features": {
            "source": null,
            "value": null
        },
        "project_overview": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/README.md",
            "value": "<p>Behavioral-Responses, which is part of the Policy Simulation Library (PSL) collection of USA tax models, estimates partial-equilibrium behavioral responses to changes in the US federal individual income and payroll tax system as simulated by Tax-Calculator.  It provides two ways of doing this: (1) the <code>response</code> function, which contains higher-level logic that supports the Tax-Brain \"Partial Equilibrium Simulation\" capability and requires specification of only the elasticities, and (2) the <code>quantity_response</code> function, which contains lower-level logic that requires specification of the quantity whose response is to be estimated, requires specification of the marginal tax rates and elasticities to be used in the response calculation, and allows the response estimation to be conducted by subgroup with different elasticities for each subgroup.</p>"
        },
        "citation": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/README.md",
            "value": "<p>Please cite the source of your analysis as \"Behavioral-Responses release #.#.#, author's calculations.\" If you wish to link to Behavioral-Responses, https://PSLmodels.github.io/Behavioral-Responses/ is preferred. Additionally, we strongly recommend that you describe the elasticity parameters used, and provide a link to the materials required to replicate your analysis or, at least, note that those materials are available upon request.</p>"
        },
        "license": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/LICENSE.md",
            "value": "<p>CC0 1.0 Universal (CC0 1.0) Public Domain Dedication</p>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"http://PSLmodels.github.io/Behavioral-Responses/index.html\">http://PSLmodels.github.io/Behavioral-Responses/index.html</a>"
        },
        "user_changelog": {
            "source": null,
            "value": null
        },
        "user_changelog_recent": {
            "source": null,
            "value": null
        },
        "dev_changelog": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/RELEASES.md",
            "value": "<p>Go <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pulls?q=is%3Apr+is%3Aclosed\">here</a> for a complete commit history.</p> <h5>2020-09-22 Release 0.11.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/76\">#76</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li> <p>Compatibility with Python 3.8.    [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/74\">#74</a>   by Jason DeBacker]</p> </li> <li> <p>Test results updated for Tax-Calculator 3.0.0.    [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/74\">#74</a>   by Jason DeBacker]</p> </li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2019-10-31 Release 0.10.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/71\">#71</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li>New capabilities for estimating differential behavioral responses   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/58\">#58</a>   by Max Ghenis]</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2019-06-08 Release 0.9.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/63\">#63</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li>Use new Tax-Calculator 2.3 Records interface to get dump variables   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/63\">#63</a>   by Martin Holmer]</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2019-05-13 Release 0.8.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/62\">#62</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li>Simplify extraction of variables from Calculator objects in <code>response</code> function   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/62\">#62</a>   by Martin Holmer]</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2019-03-17 Release 0.7.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/52\">#52</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>Simplify elasticities argument of the <code>response</code> function   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/51\">#51</a>   by Martin Holmer]</li> </ul> <p><strong>New Features</strong></p> <ul> <li>None</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2019-02-22 Release 0.6.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/46\">#46</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>Require taxcalc package for Tax-Calculator 1.0 or higher   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/46\">#46</a>   by Martin Holmer]</li> </ul> <p><strong>New Features</strong></p> <ul> <li> <p>Add optional dump argument to the <code>response</code> function   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/39\">#39</a>   by Martin Holmer responding to request by Matt Jensen and Anderson Frailey]</p> </li> <li> <p>Add <code>quantity_response</code> function that was formerly a Tax-Calculator utility function and that provides a lower-level behavioral response capability   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/43\">#43</a>   by Martin Holmer responding to suggestion by Max Ghenis]</p> </li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-12-14 Release 0.5.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/35\">#35</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li>Make behresp packages available for Python 3.7 as well as for Python 3.6   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/35\">#35</a>   by Martin Holmer]</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-12-13 Release 0.4.1</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/33\">#33</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>None</li> </ul> <p><strong>New Features</strong></p> <ul> <li>Add GitHub Travis-CI testing under Python 3.7   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/33\">#33</a>   by Martin Holmer]</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-11-13 Release 0.4.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/21\">#21</a>)</p> <p><strong>API Changes</strong></p> <ul> <li> <p>Change documentation to state that Behavioral-Responses <code>behresp</code> packages are available <strong>only</strong> via the <code>PSLmodels</code> Anaconda Cloud channel   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/20\">#20</a>   by Martin Holmer]</p> </li> <li> <p>Remove <code>versioneer.py</code> and <code>taxcalc/_version.py</code> and related code now that Package-Builder is handling version specification   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/21\">#21</a>   by Martin Holmer]</p> </li> </ul> <p><strong>New Features</strong></p> <ul> <li>None</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-11-06 Release 0.3.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/18\">#18</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>Simplify specification of package dependencies   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/18\">#18</a>   by Martin Holmer]</li> </ul> <p><strong>New Features</strong></p> <ul> <li>None</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-11-03 Release 0.2.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/15\">#15</a>)</p> <p><strong>API Changes</strong></p> <ul> <li>Make specification of required package versions comply with style in conda cheat sheet   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/15\">#15</a>   by Martin Holmer]</li> </ul> <p><strong>New Features</strong></p> <ul> <li>None</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul> <h5>2018-11-01 Release 0.1.0</h5> <p>(last merged pull request is <a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/11\">#11</a>)</p> <p><strong>API Changes</strong></p> <ul> <li> <p>Copy Tax-Calculator top-level files to Behavioral-Responses repo   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/2\">#2</a>   by Martin Holmer]</p> </li> <li> <p>Move Tax-Calculator Behavior class logic/tests to Behavioral-Responses repo   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/3\">#3</a>   by Martin Holmer]</p> </li> <li> <p>Streamline tests to use less memory   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/8\">#8</a>   by Martin Holmer with assistance from Matt Jensen]</p> </li> <li> <p>Add user documentation for Behavioral-Responses package   [<a href=\"https://github.com/PSLmodels/Behavioral-Responses/pull/11\">#11</a>   by Martin Holmer]</p> </li> </ul> <p><strong>New Features</strong></p> <ul> <li>None</li> </ul> <p><strong>Bug Fixes</strong></p> <ul> <li>None</li> </ul>"
        },
        "disclaimer": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/README.md",
            "value": "<p>Results will change as the underlying models improve. A fundamental reason for adopting open source methods in this project is so that people from all backgrounds can contribute to the models that our society uses to assess economic policy; when community-contributed improvements are incorporated, the model will produce different results.</p>"
        },
        "user_case_studies": {
            "source": null,
            "value": null
        },
        "project_roadmap": {
            "source": null,
            "value": null
        },
        "contributor_overview": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/README.md",
            "value": "<p>If you want to <strong>report a bug</strong>, create a new issue <a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">here</a> providing details on what you think is wrong with Behavioral-Responses.</p> <p>If you want to <strong>request an enhancement</strong>, create a new issue <a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">here</a> providing details on what you think should be added to Behavioral-Responses.</p> <p>If you want to <strong>propose code changes</strong>, follow the directions in the <a href=\"https://taxcalc.pslmodels.org/contributing/contributor_guide.html\">Tax-Calculator contributor guide</a> on how to fork and clone the Behavioral-Responses git repository. Before developing any code changes be sure to read completely the Tax-Calculator contributor guide and then read about the <a href=\"https://taxcalc.pslmodels.org/contributing/pr_workflow.html\">Tax-Calculator pull-request workflow</a>. When reading both documents, be sure to mentally substitute Behavioral-Response for Tax-Calculator and behresp for taxcalc.</p> <p>The Behavioral-Responses <a href=\"https://github.com/PSLmodels/Behavioral-Responses/blob/master/RELEASES.md#tax-calculator-release-history\">release history</a> provides a high-level summary of past pull requests and access to a complete list of merged, closed, and pending pull requests.</p>"
        },
        "contributor_guide": {
            "source": "https://github.com/PSLmodels/Behavioral-Responses/blob/master/README.md",
            "value": "<p>If you want to <strong>report a bug</strong>, create a new issue <a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">here</a> providing details on what you think is wrong with Behavioral-Responses.</p> <p>If you want to <strong>request an enhancement</strong>, create a new issue <a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">here</a> providing details on what you think should be added to Behavioral-Responses.</p> <p>If you want to <strong>propose code changes</strong>, follow the directions in the <a href=\"https://taxcalc.pslmodels.org/contributing/contributor_guide.html\">Tax-Calculator contributor guide</a> on how to fork and clone the Behavioral-Responses git repository. Before developing any code changes be sure to read completely the Tax-Calculator contributor guide and then read about the <a href=\"https://taxcalc.pslmodels.org/contributing/pr_workflow.html\">Tax-Calculator pull-request workflow</a>. When reading both documents, be sure to mentally substitute Behavioral-Response for Tax-Calculator and behresp for taxcalc.</p> <p>The Behavioral-Responses <a href=\"https://github.com/PSLmodels/Behavioral-Responses/blob/master/RELEASES.md#tax-calculator-release-history\">release history</a> provides a high-level summary of past pull requests and access to a complete list of merged, closed, and pending pull requests.</p>"
        },
        "governance_overview": {
            "source": null,
            "value": null
        },
        "public_funding": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": "<a href=\"https://www.ospc.org/taxbrain/\">https://www.ospc.org/taxbrain/</a>"
        },
        "public_issue_tracker": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">https://github.com/PSLmodels/Behavioral-Responses/issues</a>"
        },
        "public_qanda": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Behavioral-Responses/issues\">https://github.com/PSLmodels/Behavioral-Responses/issues</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Matt Jensen</li></ul>"
        },
        "unit_test": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Behavioral-Responses/tree/master/behresp/tests\">https://github.com/PSLmodels/Behavioral-Responses/tree/master/behresp/tests</a>"
        },
        "integration_test": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/Behavioral-Responses/tree/master/behresp/tests\">https://github.com/PSLmodels/Behavioral-Responses/tree/master/behresp/tests</a>"
        },
        "github_url": "https://github.com/PSLmodels/Behavioral-Responses"
    },
    "capital-cost-recovery": {
        "name": {
            "value": "capital-cost-recovery",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>capital-cost-recovery is an open-source model calculating and comparing capital allowances for investments in machinery, buildings, and intangibles in OECD countries.</p>"
        },
        "project_overview": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/capital-cost-recovery/\">What is capital-cost-recovery?</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Daniel Bunn</li></ul>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/capital-cost-recovery/blob/master/README.md/\"></a>"
        },
        "source_documentation": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/capital-cost-recovery/blob/master/source_documentation.md\"></a>"
        },
        "github_url": "https://github.com/TaxFoundation/capital-cost-recovery"
    },
    "Cost-of-Capital-Calculator": {
        "name": "Cost-of-Capital-Calculator",
        "img": "https://raw.githubusercontent.com/PSLmodels/Cost-of-Capital-Calculator/master/docs/ccc.png",
        "banner_title": "Cost-of-Capital-Calculator",
        "banner_subtitle": "A model to evaluate the effect of US federal taxes on businesses' investment incentives.",
        "detailed_description": "Cost-of-Capital-Calculator is a model that can be used to evaluate the effect of US federal taxes on the investment incentives of corporate and non-corporate businesses. Specifically, Cost-of-Capital-Calculator uses data on the business assets and financial policy, as well as microdata on individual tax filers, to compute marginal effective tax rates on new investments. In modeling the effects of changes to the individual income tax code, Cost-of-Capital-Calculator works with Tax-Calculator, another open-source model of US federal tax policy. Cost-of-Capital-Calculator is written in Python, an interpreted language that can execute on Windows, Mac, or Linux.",
        "policy_area": "Business Taxation, Investment",
        "geography": "United States",
        "language": "Python",
        "maintainers": [
            {
                "name": "Jason DeBacker",
                "image": "https://avatars.githubusercontent.com/u/10715924?v=4",
                "link": "https://github.com/jdebacker/"
            }
        ],
        "links": {
            "code_repository": "https://github.com/PSLmodels/Cost-of-Capital-Calculator",
            "user_documentation": "https://ccc.pslmodels.org/content/intro.html",
            "contributor_documentation": "https://ccc.pslmodels.org/content/intro.html",
            "webapp": "",
            "recent_changes": "https://github.com/PSLmodels/Cost-of-Capital-Calculator/releases"
        },
        "github_url": "https://github.com/PSLmodels/Cost-of-Capital-Calculator"
    },
    "DSGE.jl": {
        "name": {
            "value": "DSGE.jl",
            "source": ""
        },
        "project_one_line": {
            "source": "https://github.com/PSLmodels/DSGE.jl",
            "value": "<p>New York Fed DSGE Model</p>"
        },
        "project_overview": {
            "source": "https://github.com/FRBNY-DSGE/DSGE.jl/blob/main/README.md",
            "value": "<p><img alt=\"Build Status\" src=\"https://github.com/FRBNY-DSGE/DSGE.jl/workflows/build/badge.svg?branch=main\" /> <a href=\"https://frbny-dsge.github.io/DSGE.jl/stable\"><img alt=\"\" src=\"https://img.shields.io/badge/docs-stable-blue.svg\" /></a> <a href=\"https://frbny-dsge.github.io/DSGE.jl/latest\"><img alt=\"\" src=\"https://img.shields.io/badge/docs-dev-blue.svg\" /></a> <a href=\"https://codecov.io/gh/FRBNY-DSGE/DSGE.jl\"><img alt=\"codecov\" src=\"https://codecov.io/gh/FRBNY-DSGE/DSGE.jl/branch/main/graph/badge.svg\" /></a></p> <p>The <code>DSGE.jl</code> package implements the New York Fed dynamic stochastic general equilibrium (DSGE) model and provides general code to estimate many user-specified DSGE models. The package is introduced in the Liberty Street Economics blog post <a href=\"http://libertystreeteconomics.newyorkfed.org/2015/12/the-frbny-dsge-model-meets-julia.html\">The FRBNY DSGE Model Meets Julia</a>. (We previously referred to our model as the \"FRBNY DSGE Model.\")</p> <p>This Julia-language implementation mirrors the MATLAB code included in the Liberty Street Economics blog post <a href=\"http://libertystreeteconomics.newyorkfed.org/2015/05/the-frbny-dsge-model-forecast-april-2015.html\">The FRBNY DSGE Model Forecast</a>.</p> <p>Documentation for the <em>code</em> can be accessed by clicking on the <code>docs</code> button above (<code>stable</code> for the most recent release, <code>dev</code> for the most recent updates). For documentation about the most recent <em>model version</em>, read this <a href=\"https://github.com/FRBNY-DSGE/DSGE.jl/blob/main/docs/DSGE_Model_Documentation_1002.pdf\">pdf</a>. We recommend new users take a look at our <a href=\"https://github.com/FRBNY-DSGE/DSGE.jl/tree/main/examples\">example scripts</a> as they read the documentation because the examples will make it easier to comprehend the documentation. For details on the example scripts, see <a href=\"https://frbny-dsge.github.io/DSGE.jl/stable/running_existing_model/\">Running Existing Models</a>.</p> <p>The New York Fed DSGE team is currently extending the code to solve and estimate heterogeneous agent models. Filtering and smoothing algorithms are available in the registered package <a href=\"https://github.com/FRBNY-DSGE/StateSpaceRoutines.jl\">StateSpaceRoutines.jl</a>. An implementation of Sequential Monte Carlo (SMC) sampling, used for the estimation of DSGE models, can be found in the registered package <a href=\"https://github.com/FRBNY-DSGE/SMC.jl\">SMC.jl</a>. The foundational <code>AbstractModel</code> type, from which the <code>AbstractDSGEModel</code> type derives, is defined in the registered package <a href=\"https://github.com/FRBNY-DSGE/ModelConstructors.jl\">ModelConstructors.jl</a>.</p> <p>Further extensions of the DSGE model code may be released at the discretion of the New York Fed.</p> <h5>Installation</h5> <p><code>DSGE.jl</code> is a registered Julia package in the <a href=\"https://github.com/JuliaRegistries/General\"><code>General</code></a> registry. To install it, open your Julia REPL, type <code>]</code> to enter the package manager, and run</p> <p><code>julia pkg&gt; add DSGE</code></p> <p>If you use any code that loads data (e.g. the example script <code>run_default.jl</code> and <code>make_packet.jl</code>), then you need make sure you have a FRED API key by following these <a href=\"https://github.com/micahjsmith/FredData.jl\">instructions for the FredData.jl package</a>.</p> <p>If you are using Windows OS and you encounter the error <code>AssertionError: length(dirs) == 1</code>, please see this <a href=\"https://github.com/JuliaLang/Pkg.jl/issues/1943\">issue</a>. Additionally, please do not run the <code>plot.jl</code> test if you are using Windows OS because the generated output will violate the default filename length restriction on Windows. If you want to run this test, then you need to enable <a href=\"https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#enable-long-paths-in-windows-10-version-1607-and-later\">long paths</a>.</p> <p><em>Note we do not test our code in Windows OS, so we cannot guarantee the code works properly in Windows.</em></p> <h5>Versioning</h5> <p><code>DSGE.jl</code> is currently compatible with Julia <code>v1.x</code> (as of <code>v1.1.6</code>).</p> <p>To use <code>DSGE.jl</code> with Julia <code>v0.7</code>, please check out tag <code>0.8.1</code>. To do this, click on the drop-down menu that reads <code>branch:main</code> on the left-hand side of the page. Select <code>tags</code>, then <code>v0.8.1</code>.  If you've already cloned the repo, you can simply run <code>git checkout v0.8.1</code>.</p> <p>To use <code>DSGE.jl</code> with Julia <code>v0.6</code>, please check out tag <code>0.4.1</code>.</p> <h5>Precompilation</h5> <p>The <code>DSGE.jl</code> package is not precompiled by default because when running code in parallel, we want to re-compile the copy of <code>DSGE.jl</code> on each processor to guarantee the right version of the code is being used. If users do not anticipate using parallelism, then users ought to change the first line of <code>src/DSGE.jl</code> from</p> <p><code>isdefined(Base, :__precompile__) &amp;&amp; __precompile__(false)</code></p> <p>to</p> <p><code>isdefined(Base, :__precompile__) &amp;&amp; __precompile__(true)</code></p> <h5>Citing DSGE.jl</h5> <p>DSGE.jl (Version 1.2.1)[Source code], https://github.com/PSLmodels/DSGE.jl</p>"
        },
        "user_documentation": {
            "source": "https://frbny-dsge.github.io/DSGE.jl/stable/",
            "value": "<a href=\"https://frbny-dsge.github.io/DSGE.jl/stable/\">User documentation</a>"
        },
        "user_changelog_recent": {
            "source": null,
            "value": null
        },
        "contributor_overview": {
            "source": "https://github.com/PSLmodels/DSGE.jl#installation",
            "value": "<p>If you want to report a <b>bug</b>, create a new issue <a href=\"https://github.com/PSLmodels/DSGE.jl/issues\">here</a> providing details on what you think is wrong with DSGE.jl.</p><p>If you want to request <b>an enhancement</b>, create a new issue <a href=\"https://github.com/PSLmodels/DSGE.jl/issues\">here</a> providing details on what you think should be added to DSGE.jl. </p>"
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Marco Del Negro</li><li>William Chen</li><li>Shlok Goyal</li><li>Alissa Johnson</li><li>Aidan Gleich</li></ul>"
        },
        "github_url": "https://github.com/FRBNY-DSGE/DSGE.jl"
    },
    "microdf": {
        "name": {
            "value": "microdf",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>microdf is a Python package for analyzing economic microdata as pandas DataFrames, with special functions for Tax-Calculator.</p>"
        },
        "project_overview": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/microdf\">What is microdf?</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Max Ghenis</li><ul><li>email: max@ubicenter.org</li></ul>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"http://pslmodels.github.io/microdf/\"></a>"
        },
        "contributor_overview": {
            "source": null,
            "value": "<a href=\"http://github.com/PSLmodels/microdf/\"></a>"
        },
        "user_changelog_recent": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/microdf/releases\"></a>"
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        },
        "github_url": "https://github.com/PSLmodels/microdf"
    },
    "OG-Core": {
        "name": "OG-Core",
        "img": "https://raw.githubusercontent.com/PSLmodels/OG-Core/master/docs/OG-Core_logo.png",
        "banner_title": "OG-Core",
        "banner_subtitle": "Core theory and code for large-scale open source overlapping generations model of region-specific fiscal policy",
        "detailed_description": "https://raw.githubusercontent.com/PSLmodels/OG-Core/master/README.md",
        "policy_area": "Policy analysis, policy reform, fiscal policy, tax, benefits, social security, public finance, macroeconomic analysis, general equilibrium, dynamic scoring, overlapping generations, OG, OLG",
        "geography": "World, generic, country-specific, region-specific",
        "language": "Python",
        "maintainers": [
            {
                "name": "Richard W. Evans",
                "image": "https://github.com/rickecon.png",
                "link": "https://github.com/rickecon"
            },
            {
                "name": "Jason DeBacker",
                "image": "https://github.com/jdebacker.png",
                "link": "https://github.com/jdebacker"
            }
        ],
        "links": {
            "code_repository": "https://github.com/PSLmodels/OG-Core",
            "user_documentation": "https://pslmodels.github.io/OG-Core",
            "contributor_documentation": "https://pslmodels.github.io/OG-Core/content/contributing/contributor_guide.html",
            "webapp": "",
            "recent_changes": "https://github.com/PSLmodels/OG-Core/blob/master/CHANGELOG.md"
        },
        "github_url": "https://github.com/PSLmodels/OG-Core"
    },
    "OG-USA": {
        "name": "OG-USA",
        "img": "https://raw.githubusercontent.com/PSLmodels/OG-USA/master/docs/OG-USA_logo.png",
        "banner_title": "OG-USA",
        "banner_subtitle": "Large-scale open source overlapping generations model of US fiscal policy",
        "detailed_description": "https://raw.githubusercontent.com/PSLmodels/OG-USA/master/README.md",
        "policy_area": "Policy analysis, policy reform, fiscal policy, tax, benefits, social security, public finance, macroeconomic analysis, general equilibrium, dynamic scoring, overlapping generations, OG, OLG",
        "geography": "USA",
        "language": "Python",
        "maintainers": [
            {
                "name": "Richard W. Evans",
                "image": "https://github.com/rickecon.png",
                "link": "https://github.com/rickecon"
            },
            {
                "name": "Jason DeBacker",
                "image": "https://github.com/jdebacker.png",
                "link": "https://github.com/jdebacker"
            }
        ],
        "links": {
            "code_repository": "https://github.com/PSLmodels/OG-USA",
            "user_documentation": "https://pslmodels.github.io/OG-USA",
            "contributor_documentation": "https://pslmodels.github.io/OG-USA/content/contributing/contributor_guide.html",
            "webapp": "forthcoming",
            "recent_changes": "https://github.com/PSLmodels/OG-USA/blob/master/CHANGELOG.md"
        },
        "github_url": "https://github.com/PSLmodels/OG-USA"
    },
    "ParamTools": {
        "name": {
            "value": "ParamTools",
            "source": ""
        },
        "project_one_line": {
            "source": "https://github.com/PSLmodels/ParamTools",
            "value": "<p>Library for parameter processing and validation with a focus on computational modeling projects</p>"
        },
        "key_features": {
            "source": null,
            "value": null
        },
        "project_overview": {
            "source": "https://github.com/PSLmodels/ParamTools/blob/master/README.md",
            "value": "<p><strong>Define, update, and validate your model's parameters.</strong></p> <p>Install using pip:</p> <p><code>pip install paramtools</code></p> <p>Install using conda:</p> <p><code>conda install -c conda-forge paramtools</code></p> <h5>Usage</h5> <p>Subclass <code>paramtools.Parameters</code> and define your model's <a href=\"https://paramtools.dev/parameters\">parameters</a>:</p> <p>```python import paramtools</p> <p>class Params(paramtools.Parameters):     defaults = {         \"schema\": {             \"labels\": {                 \"date\": {                     \"type\": \"date\",                     \"validators\": {                         \"range\": {                             \"min\": \"2020-01-01\",                             \"max\": \"2021-01-01\",                             \"step\": {\"months\": 1}                         }                     }                 }             },         },         \"a\": {             \"title\": \"A\",             \"type\": \"int\",             \"value\": [                 {\"date\": \"2020-01-01\", \"value\": 2},                 {\"date\": \"2020-10-01\", \"value\": 8},             ],             \"validators\": {                 \"range\" : {                     \"min\": 0, \"max\": \"b\"                 }             }         },         \"b\": {             \"title\": \"B\",             \"type\": \"float\",             \"value\": [{\"date\": \"2020-01-01\", \"value\": 10.5}]         }     } ```</p> <h3>Access parameter values</h3> <p>Access values using <code>.sel</code>:</p> <p>```python params = Params()</p> <p>params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 2},   {'date': datetime.date(2020, 10, 1), 'value': 8}, ]) </code></pre> <p>Look up parameter values using a pandas-like api:</p> <p>```python from datetime import date</p> <p>result = params.sel[\"a\"][\"date\"] == date(2020, 1, 1) result ```</p> <pre><code>QueryResult([   {'date': datetime.date(2020, 1, 1), 'value': 2} ]) </code></pre> <p><code>python result.isel[0][\"value\"]</code></p> <pre><code>2 </code></pre> <h3>Adjust and validate parameter values</h3> <p>Add a new value:</p> <p>```python params.adjust({\"a\": [{\"date\": \"2020-11-01\", \"value\": 22}]})</p> <p>params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 2},   {'date': datetime.date(2020, 10, 1), 'value': 8},   {'date': datetime.date(2020, 11, 1), 'value': 22}, ]) </code></pre> <p>Update an existing value:</p> <p>```python params.adjust({\"a\": [{\"date\": \"2020-01-01\", \"value\": 3}]})</p> <p>params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 3},   {'date': datetime.date(2020, 10, 1), 'value': 8},   {'date': datetime.date(2020, 11, 1), 'value': 22}, ]) </code></pre> <p>Update all values:</p> <p>```python params.adjust({\"a\": 7})</p> <p>params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 7},   {'date': datetime.date(2020, 10, 1), 'value': 7},   {'date': datetime.date(2020, 11, 1), 'value': 7}, ]) </code></pre> <p>Errors on values that are out of range:</p> <p><code>python params.adjust({\"a\": -1})</code></p> <pre><code>    ---------------------------------------------------------------------------  ValidationError                           Traceback (most recent call last)  &lt;ipython-input-8-f8f1b7f6cd9a&gt; in &lt;module&gt;     ----&gt; 1 params.adjust({\"a\": -1})   ~/Paramtools/paramtools/parameters.py in adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, clobber)     253             least one existing value item's corresponding label values.     254         \"\"\"     --&gt; 255         return self._adjust(     256             params_or_path,     257             ignore_warnings=ignore_warnings,   ~/Paramtools/paramtools/parameters.py in _adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, is_deserialized, clobber)     371             not ignore_warnings and has_warnings     372         ):     --&gt; 373             raise self.validation_error     374     375         # Update attrs for params that were adjusted.   ValidationError: {     \"errors\": {         \"a\": [             \"a -1 &lt; min 0 \"         ]     } } </code></pre> <p>```python params = Params()</p> <p>params.adjust({\"a\": [{\"date\": \"2020-01-01\", \"value\": 11}]}) ```</p> <pre><code>    ---------------------------------------------------------------------------  ValidationError                           Traceback (most recent call last)  &lt;ipython-input-9-cc8a21f044d8&gt; in &lt;module&gt;       1 params = Params()       2     ----&gt; 3 params.adjust({\"a\": [{\"date\": \"2020-01-01\", \"value\": 11}]})   ~/Paramtools/paramtools/parameters.py in adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, clobber)     253             least one existing value item's corresponding label values.     254         \"\"\"     --&gt; 255         return self._adjust(     256             params_or_path,     257             ignore_warnings=ignore_warnings,   ~/Paramtools/paramtools/parameters.py in _adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, is_deserialized, clobber)     371             not ignore_warnings and has_warnings     372         ):     --&gt; 373             raise self.validation_error     374     375         # Update attrs for params that were adjusted.   ValidationError: {     \"errors\": {         \"a\": [             \"a[date=2020-01-01] 11 &gt; max 10.5 b[date=2020-01-01]\"         ]     } } </code></pre> <p>Errors on invalid values:</p> <p>```python params = Params()</p> <p>params.adjust({\"b\": \"abc\"}) ```</p> <pre><code>    ---------------------------------------------------------------------------  ValidationError                           Traceback (most recent call last)  &lt;ipython-input-10-8373a2715e38&gt; in &lt;module&gt;       1 params = Params()       2     ----&gt; 3 params.adjust({\"b\": \"abc\"})   ~/Paramtools/paramtools/parameters.py in adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, clobber)     253             least one existing value item's corresponding label values.     254         \"\"\"     --&gt; 255         return self._adjust(     256             params_or_path,     257             ignore_warnings=ignore_warnings,   ~/Paramtools/paramtools/parameters.py in _adjust(self, params_or_path, ignore_warnings, raise_errors, extend_adj, is_deserialized, clobber)     371             not ignore_warnings and has_warnings     372         ):     --&gt; 373             raise self.validation_error     374     375         # Update attrs for params that were adjusted.   ValidationError: {     \"errors\": {         \"b\": [             \"Not a valid number: abc.\"         ]     } } </code></pre> <h3>Extend parameter values using label definitions</h3> <p>Extend values using <code>label_to_extend</code>:</p> <p><code>python params = Params(label_to_extend=\"date\")</code></p> <p><code>python params.sel[\"a\"]</code></p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 2},   {'date': datetime.date(2020, 2, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 3, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 4, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 5, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 6, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 7, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 8, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 9, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 10, 1), 'value': 8},   {'date': datetime.date(2020, 11, 1), 'value': 8, '_auto': True},   {'date': datetime.date(2020, 12, 1), 'value': 8, '_auto': True},   {'date': datetime.date(2021, 1, 1), 'value': 8, '_auto': True}, ]) </code></pre> <p>Updates to values are carried through to future dates:</p> <p>```python params.adjust({\"a\": [{\"date\": \"2020-4-01\", \"value\": 9}]})</p> <p>params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 2},   {'date': datetime.date(2020, 2, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 3, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 4, 1), 'value': 9},   {'date': datetime.date(2020, 5, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 6, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 7, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 8, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 9, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 10, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 11, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 12, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2021, 1, 1), 'value': 9, '_auto': True}, ]) </code></pre> <p>Use <code>clobber</code> to only update values that were set automatically:</p> <p>```python params = Params(label_to_extend=\"date\") params.adjust(     {\"a\": [{\"date\": \"2020-4-01\", \"value\": 9}]},     clobber=False, )</p> <h1>Sort parameter values by date for nicer output</h1> <p>params.sort_values() params.sel[\"a\"] ```</p> <pre><code>Values([   {'date': datetime.date(2020, 1, 1), 'value': 2},   {'date': datetime.date(2020, 2, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 3, 1), 'value': 2, '_auto': True},   {'date': datetime.date(2020, 4, 1), 'value': 9},   {'date': datetime.date(2020, 5, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 6, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 7, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 8, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 9, 1), 'value': 9, '_auto': True},   {'date': datetime.date(2020, 10, 1), 'value': 8},   {'date': datetime.date(2020, 11, 1), 'value': 8, '_auto': True},   {'date': datetime.date(2020, 12, 1), 'value': 8, '_auto': True},   {'date': datetime.date(2021, 1, 1), 'value': 8, '_auto': True}, ]) </code></pre> <h3>NumPy integration</h3> <p>Access values as NumPy arrays with <code>array_first</code>:</p> <p>```python params = Params(label_to_extend=\"date\", array_first=True)</p> <p>params.a ```</p> <pre><code>array([2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8]) </code></pre> <p><code>python params.a * params.b</code></p> <pre><code>array([21., 21., 21., 21., 21., 21., 21., 21., 21., 84., 84., 84., 84.]) </code></pre> <p>Only get the values that you want:</p> <p><code>python arr = params.to_array(\"a\", date=[\"2020-01-01\", \"2020-11-01\"]) arr</code></p> <pre><code>array([2, 8]) </code></pre> <p>Go back to a list of dictionaries:</p> <p><code>python params.from_array(\"a\", arr, date=[\"2020-01-01\", \"2020-11-01\"])</code></p> <pre><code>[{'date': datetime.date(2020, 1, 1), 'value': 2},  {'date': datetime.date(2020, 11, 1), 'value': 8}] </code></pre> <h5>Documentation</h5> <p>Full documentation available at <a href=\"https://paramtools.dev\">paramtools.dev</a>.</p> <h5>Contributing</h5> <p>Contributions are welcome! Checkout <a href=\"https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md\">CONTRIBUTING.md</a> to get started.</p> <h5>Credits</h5> <p>ParamTools is built on top of the excellent <a href=\"https://github.com/marshmallow-code/marshmallow\">marshmallow</a> JSON schema and validation framework. I encourage everyone to check out their repo and documentation. ParamTools was modeled off of <a href=\"https://github.com/PSLmodels/Tax-Calculator\">Tax-Calculator's</a> parameter processing and validation engine due to its maturity and sophisticated capabilities.</p>"
        },
        "citation": {
            "source": null,
            "value": null
        },
        "license": {
            "source": "https://github.com/PSLmodels/ParamTools/blob/master/LICENSE.txt",
            "value": "<p>MIT</p>"
        },
        "user_documentation": {
            "source": "https://paramtools.dev",
            "value": "<a href=\"https://paramtools.dev\">https://paramtools.dev</a>"
        },
        "user_changelog": {
            "source": "https://github.com/PSLmodels/ParamTools/releases",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/releases\">https://github.com/PSLmodels/ParamTools/releases</a>"
        },
        "user_changelog_recent": {
            "source": "https://github.com/PSLmodels/ParamTools/releases/latest",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/releases/latest\">https://github.com/PSLmodels/ParamTools/releases/latest</a>"
        },
        "dev_changelog": {
            "source": "https://github.com/PSLmodels/ParamTools/releases",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/releases\">https://github.com/PSLmodels/ParamTools/releases</a>"
        },
        "disclaimer": {
            "source": null,
            "value": null
        },
        "user_case_studies": {
            "source": null,
            "value": null
        },
        "project_roadmap": {
            "source": null,
            "value": null
        },
        "contributor_overview": {
            "source": "https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md",
            "value": "<p>Contributions are welcome! Open a <a href=\"https://github.com/PSLmodels/ParamTools/pulls\">PR</a> with your changes (and tests to go along with them!). In this PR describe what your change does and link to any relevant issues.</p> <h5>Feature Requests</h5> <p>Please open an <a href=\"https://github.com/PSLmodels/ParamTools/issues\">issue</a> describing the feature and its potential use cases.</p> <h5>Bug Reports</h5> <p>Please open an <a href=\"https://github.com/PSLmodels/ParamTools/issues\">issue</a> describing the bug.</p>"
        },
        "contributor_guide": {
            "source": "https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md\">https://github.com/PSLmodels/ParamTools/blob/master/CONTRIBUTING.md</a>"
        },
        "governance_overview": {
            "source": null,
            "value": null
        },
        "public_funding": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        },
        "public_issue_tracker": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/issues\">https://github.com/PSLmodels/ParamTools/issues</a>"
        },
        "public_qanda": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/issues\">https://github.com/PSLmodels/ParamTools/issues</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Hank Doupe</li></ul>"
        },
        "unit_test": {
            "source": "https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests\">https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests</a>"
        },
        "integration_test": {
            "source": "https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests",
            "value": "<a href=\"https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests\">https://github.com/PSLmodels/ParamTools/tree/master/paramtools/tests</a>"
        },
        "github_url": "https://github.com/PSLmodels/ParamTools"
    },
    "PCI-China": {
        "name": {
            "value": "PCI-China",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>A machine learning project that analyzes state-run media to predict policy changes.</p>"
        },
        "project_overview": {
            "source": "https://github.com/PSLmodels/PCI-China/blob/master/README.md",
            "value": "<p>China's industrialization process has long been a product of government direction, be it coercive central planning or ambitious industrial policy. For the first time in the literature, we develop a quantitative indicator of China's policy priorities over a long period of time, which we call the Policy Change Index for China (PCI-China). The PCI-China is a leading indicator that runs from 1951 to the most recent quarter and can be updated in the future. In other words, the PCI-China not only helps us understand the past of China's industrialization but also allows us to make short-term predictions about its future directions.</p> <p>The design of the PCI-China has two building blocks: (1) it takes as input data the full text of the <em>People's Daily</em> --- the official newspaper of the Communist Party of China --- since it was founded in 1946; (2) it employs a set of machine learning techniques to \"read\" the articles and detect changes in the way the newspaper prioritizes policy issues.</p> <p>The source of the PCI-China's predictive power rests on the fact that the <em>People's Daily</em> is at the nerve center of China's propaganda system and that propaganda changes often precede policy changes. Before the great transformation from the central planning under Mao to the economic reform program after Mao, for example, considerable efforts were made by the Chinese government to promote the idea of reform, move public opinion, and mobilize resources toward the new agenda. Therefore, by detecting (real-time) changes in propaganda, the PCI-China is, effectively, predicting (future) changes in policy.</p> <p>For details about the methodology and findings of this project, please see the following research paper:</p> <ul> <li>Chan, Julian TszKin and Weifeng Zhong. 2019. \"Reading China: Predicting Policy Change with Machine Learning.\" <a href=\"https://www.aei.org/research-products/working-paper/reading-china-predicting-policy-change-with-machine-learning/\">AEI Economics Working Paper No. 2018-11</a> (latest version available <a href=\"https://policychangeindex.org/pdf/Reading_China.pdf\">here</a>).</li> </ul>"
        },
        "citation": {
            "source": "https://github.com/PSLmodels/PCI-China/blob/master/README.md",
            "value": "<p>Please cite the source of the latest PCI-China by the website: https://policychangeindex.org.</p> <p>For academic work, please cite the following research paper:</p> <ul> <li>Chan, Julian TszKin and Weifeng Zhong. 2019. \"Reading China: Predicting Policy Change with Machine Learning.\" <a href=\"https://www.aei.org/research-products/working-paper/reading-china-predicting-policy-change-with-machine-learning/\">AEI Economics Working Paper No. 2018-11</a> (latest version available <a href=\"https://policychangeindex.org/pdf/Reading_China.pdf\">here</a>).</li> </ul>"
        },
        "license": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/blob/master/LICENSE.md\">GNU Affero General Public License v3.0</a>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/blob/master/README.md\">PCI User Documentation</a>"
        },
        "user_changelog": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/blob/master/CHANGES.md\">PCI Change History</a>"
        },
        "disclaimer": {
            "source": "https://github.com/PSLmodels/PCI-China/blob/master/README.md",
            "value": "<p>Results will change as the underlying models improve. A fundamental reason for adopting open source methods in this project is so that people from all backgrounds can contribute to the models that our society uses to assess and predict changes in public policy; when community-contributed improvements are incorporated, the model will produce better results.</p>"
        },
        "public_issue_tracker": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/issues\">Issues</a>"
        },
        "public_qanda": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/issues\">Issues</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Julian TszKin Chan</li><li>Weifeng Zhong</li></ul>"
        },
        "unit_test": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/tree/master/PCI-China/tests\">PCI unit tests</a>"
        },
        "integration_test": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/PCI/tree/master/PCI-China/tests\">PCI integration test</a>"
        },
        "contributor_overview": {
            "source": "https://github.com/PSLmodels/PCI-China/blob/master/README.md",
            "value": "<p>The first step for everyone (users and developers) is to open a free GitHub account. And then you can specify how you want to \"watch\" the PCI-China repository by clicking on the Watch button in the upper-right corner of the repository's main page.</p> <p>The second step is to get familiar with the PCI-China repository by reading the documentation.</p> <p>If you want to ask a question or report a bug, create a new issue <a href=\"https://github.com/PSLmodels/PCI-China/issues\">here</a> and post your question or tell us what you think is wrong with the repository.</p> <p>If you want to request an enhancement, create a new issue <a href=\"https://github.com/PSLmodels/PCI-China/issues\">here</a> and provide details on what you think should be added to the repository.</p> <h5>Installation Guide</h5> <p>First, install the dependencies and set up the proper environment by running the following command in the shell:</p> <p><code>{shell} ./PCI-China&gt;conda env create -f environment.yml</code></p> <p>Second, activate the new environment <code>pci_env</code>:</p> <p><code>{shell} ./PCI-China&gt;conda activate pci_env</code></p> <p>Third, run the following in the <code>pci_env</code> environment:</p> <p><code>{shell} ./PCI-China&gt;sh run_all.sh</code></p> <p>The above command will perform the following tasks: (1) processing data, (2) training models for two-, five-, and ten-year rolling windows, (3) compiling results, (4) creating text output, and (5) visualizing results.</p> <p>If you do not have the People's Daily data, you can run our tests which estimate a PCI using a simulated data set:</p> <p><code>{python} ./PCI-China&gt;pytest</code></p> <p>Notes</p> <ul> <li> <p>The default setting uses the first GPU to run the code. If you don't have a GPU, the code can be ran on CPU by changing the GPU setting to -1 (see details below)</p> </li> <li> <p>One of the package imported by PCI (jieba-fast) requires <a href=\"https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019\">Visual Studio C++ Build Tools</a>. Please checkout jieba-fast's <a href=\"https://github.com/deepcs233/jieba_fast\">website</a> for details.</p> </li> </ul> <h5>Function Usage</h5> <p>The python and an R script listed below are contained in the <code>run_all.sh</code> file. They are available for users to perform the following tasks, respectively.</p> <ul> <li> <p><code>proc_pd.py</code>:             Process and prepare the raw data from the <em>People's Daily</em> for building the neural network models.</p> </li> <li> <p><code>pci.py</code>:                 Train a neural network model to construct the PCI-China for a specified year-quarter, using a specified rolling window length.</p> </li> <li> <p><code>compile_tuning.py</code>:      Compile the results from all models and export them to a <code>.csv</code> file.</p> </li> <li> <p><code>create_text_output.py</code>:  Generate the raw data together with the model's classification result for each article in a specified year-quarter.</p> </li> <li> <p><code>gen_figures.R</code>:          Generate figures.</p> </li> <li> <p><code>create_plotly.py</code>:       Create an interactive Plotly figure.</p> </li> </ul> <p>For the <code>pci.py</code> file, users can also check out the descriptions of the arguments for the function using the <code>--help</code> option:</p> <p>```{shell} ./PCI-China&gt;python pci.py --help Using TensorFlow backend. usage: pci.py [-h] [--model MODEL] [--year YEAR] [--month MONTH] [--gpu GPU]               [--iterator ITERATOR] [--root ROOT] [--temperature TEMPERATURE]               [--discount DISCOUNT] [--bandwidth BANDWIDTH]</p> <p>optional arguments:     -h, --help            show this help message and exit     --model MODEL         Model name: window_5_years_quarterly,                         window_10_years_quarterly, window_2_years_quarterly     --year YEAR           Target year     --month MONTH         Target month     --gpu GPU             Which gpu to use     --iterator ITERATOR   Iterator in simulated annealing     --root ROOT           Root directory     --temperature TEMPERATURE                         Temperature in simulated annealing     --discount DISCOUNT   Discount factor in simulated annealing     --bandwidth BANDWIDTH                         Bandwidth in simulated annealing ```</p> <h5>Data</h5> <p>The raw data of the <em>People's Daily</em>, which are not provided in this repository, should be placed in the sub-folder <code>PCI-China/Input/pd/</code>. Each file in this sub-folder should contain one year-quarter of data, be named by the respective year-quarter, and be in the <code>.pkl</code> format. For example, the raw data for the first quarter of 2018 should be in the file <code>2018_Q1.pkl</code>. Below is the list of column names and types of each raw data file:</p> <p>```{python}</p> <blockquote> <blockquote> <blockquote> <p>df1 = pd.read_pickle(\"./PCI-China/Input/pd/pd_1946_1975.pkl\") df1.dtypes date     datetime64[ns] year              int64 month             int64 day               int64 page              int64 title            object body             object id                int64 dtype: object ```</p> </blockquote> </blockquote> </blockquote> <p>where <code>title</code> and <code>body</code> are the Chinese texts of the title and body of each article.</p> <p>The processed data of the <em>People's Daily</em>, which are not provided in this repository, should be placed in the sub-folder <code>PCI-China/data/Output/database.db</code>. The file is in SQLite format. The schema of the database is shown as the table below:</p> <p>```{python} import sqlite3 import pandas as pd </p> <p>conn = sqlite3.connect(\"data/output/database.db\") pd.read_sql_query(\"PRAGMA TABLE_INFO(main)\", conn) ```</p> <table border=\"1\" class=\"dataframe\">   <thead>     <tr style=\"text-align: right;\">       <th></th>       <th>cid</th>       <th>name</th>       <th>type</th>       <th>notnull</th>       <th>dflt_value</th>       <th>pk</th>     </tr>   </thead>   <tbody>     <tr>       <th>0</th>       <td>0</td>       <td>date</td>       <td>TIMESTAMP</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>1</th>       <td>1</td>       <td>id</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>2</th>       <td>2</td>       <td>page</td>       <td>REAL</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>3</th>       <td>3</td>       <td>title</td>       <td>TEXT</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>4</th>       <td>4</td>       <td>body</td>       <td>TEXT</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>5</th>       <td>5</td>       <td>strata</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>6</th>       <td>6</td>       <td>title_seg</td>       <td>TEXT</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>7</th>       <td>7</td>       <td>body_seg</td>       <td>TEXT</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>8</th>       <td>8</td>       <td>year</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>9</th>       <td>9</td>       <td>quarter</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>10</th>       <td>10</td>       <td>month</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>11</th>       <td>11</td>       <td>day</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>12</th>       <td>12</td>       <td>weekday</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>13</th>       <td>13</td>       <td>frontpage</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>14</th>       <td>14</td>       <td>page1to3</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>15</th>       <td>15</td>       <td>title_len</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>16</th>       <td>16</td>       <td>body_len</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>17</th>       <td>17</td>       <td>n_articles_that_day</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>18</th>       <td>18</td>       <td>n_pages_that_day</td>       <td>REAL</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>     <tr>       <th>19</th>       <td>19</td>       <td>n_frontpage_articles_that_day</td>       <td>INTEGER</td>       <td>0</td>       <td>None</td>       <td>0</td>     </tr>   </tbody> </table> </div> <p>where <code>title_int</code> and <code>body_int</code> are the word embeddings (numeric vectors) of the title and body of each article.</p> <p>The summary statistics for the processed data can be found in the following <code>.csv</code> file:</p> <p><a href=\"https://github.com/PSLmodels/PCI-China/blob/master/PCI-China/figures/Summary%20statistics.csv\">https://github.com/PSLmodels/PCI-China/blob/master/PCI-China/figures/Summary%20statistics.csv</a></p> <p>Neither the raw data nor the processed data of the <em>People's Daily</em> can be released by the authors. Users who have questions about applying the repository to their own data are welcome to contact the authors:</p> <ul> <li> <p><a href=\"https://sites.google.com/site/ctszkin/\">Julian TszKin Chan</a>: julian.chan [AT] policychangeindex.org;</p> </li> <li> <p><a href=\"https://www.weifengzhong.com\">Weifeng Zhong</a>: weifeng.zhong [AT] policychangeindex.org.</p> </li> </ul> <h5>Citing the PCI-China</h5> <p>Please cite the source of the latest PCI-China by the website: https://policychangeindex.org.</p> <p>For academic work, please cite the following research paper:</p> <ul> <li>Chan, Julian TszKin and Weifeng Zhong. 2019. \"Reading China: Predicting Policy Change with Machine Learning.\" <a href=\"https://www.aei.org/research-products/working-paper/reading-china-predicting-policy-change-with-machine-learning/\">AEI Economics Working Paper No. 2018-11</a> (latest version available <a href=\"https://policychangeindex.org/pdf/Reading_China.pdf\">here</a>).</li> </ul>"
        },
        "key_features": {
            "source": null,
            "value": null
        },
        "user_changelog_recent": {
            "source": null,
            "value": null
        },
        "dev_changelog": {
            "source": null,
            "value": null
        },
        "user_case_studies": {
            "source": null,
            "value": null
        },
        "project_roadmap": {
            "source": null,
            "value": null
        },
        "contributor_guide": {
            "source": null,
            "value": null
        },
        "governance_overview": {
            "source": null,
            "value": null
        },
        "public_funding": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        },
        "github_url": "https://github.com/PSLmodels/PCI-China"
    },
    "policy-rules-database": {
        "name": {
            "value": "policy-rules-database",
            "source": ""
        },
        "project_one_line": {
            "source": "https://github.com/PSLmodels/policy-rules-database",
            "value": "<p>Repository of rules and provisions for all major federal and state public assistance programs, taxes, and tax credits.</p>"
        },
        "key_features": {
            "source": null,
            "value": null
        },
        "project_overview": {
            "source": "https://github.com/FRB-Atlanta-Advancing-Careers/policy-rules-database/blob/main/README.md",
            "value": "<p>The Policy Rules Database (PRD) is an open-source repository that contains up-to-date rules and provisions for all major federal and state public assistance programs, taxes, and tax credits in a single easy-to-use database. </p> <ul> <li> <p><a href=\"http://eepurl.com/ib_0eT\">Subscribe</a> to receive email updates about new features of the Policy Rules Database</p> </li> <li> <p>To learn more, visit the <a href=\"https://www.atlantafed.org/economic-mobility-and-resilience/advancing-careers-for-low-income-families/policy-rules-database.aspx\">PRD website</a></p> </li> <li> <p>Read <a href=\"https://github.com/FRB-Atlanta-Advancing-Careers/policy-rules-database/blob/9bb1e96a5218a8b486b2b3bcbf28fdcd5a2ec906/PRD%20Technical%20Manual.pdf\">PRD Technical Manual</a> to get started with the PRD and to learn details about each program included in the database</p> </li> <li> <p>Analyze the structure of the U.S. social safety net using <a href=\"https://emar-data-tools.shinyapps.io/prd_dashboard/\">PRD Dashboard</a></p> </li> </ul> <p>The terms of the PRD use are defined by the GNU General Public License v3.0. If you are interested in alternative licensing arrangements, please contact cliff@atl.frb.org</p>"
        },
        "citation": {
            "source": "https://github.com/FRB-Atlanta-Advancing-Careers/policy-rules-database/blob/main/README.md",
            "value": "<p>Ilin, Elias and Ellyn Terry. 2021. 'The Policy Rules Database.' Federal Reserve Bank of Atlanta. Available at www.frbatlanta.org/economic-mobility-and-resilience/advancing-careers-forlow-income-families/policy-rules-database.aspx. </p> <h5>How to Use This Repository?</h5> <p><strong>Step 1: Download the repository</strong></p> <p>Download and unzip this repository to your local machine. Make sure you have R and RStudio installed.</p> <p><strong>Step 2: Specify settings of the simulation - family characteristics and public benefits</strong></p> <p>Open TEST.yml file located in the <em>projects</em> folder. Adjust each input accordingly.</p> <p><strong>Step 3: Run the simulation</strong></p> <p>Open applyBenefitsCalculator.R and run the program.</p> <p><strong>Step 4: Explore the results</strong></p> <p>Results of the simulation are saved as a csv file in the <em>output</em> folder.</p> <p><strong>Step 5 (Optional): Modify and Explore</strong></p> <p>The PRD GitHub repository gives users flexibility in how to use the database. That includes:</p> <ul> <li> <p>Modifying benefits_functions.R located in <em>functions</em> folder to produce policy simulations</p> </li> <li> <p>Applying PRD calculations to external datasets (CPS, ACS, SIPP etc) for microsimulation purposes </p> </li> </ul> <h5>Description of Each File Included in This Repository</h5> <p>This folder contains the following files:</p> <p><strong>1. \"PRD Technical Manual.pdf\"</strong></p> <p>This document provides detailed information on each public assistance program and tax credit included in the PRD. The document also describes the programming steps necessary to implement the calculations for each program in any programming language.</p> <p><strong>2. \"prd_parameters\" folder</strong></p> <p>Contains main Policy Rules Database parameters files in RData format. These files are then used by the PRD functions to produce the calculations</p> <p>The following files are located in this folder:</p> <ol> <li>benefit.parameters.RData - eligibility &amp; benefits parameters for each public assistance programs and tax credit included into the PRD</li> <li>expenses.RData - parameters from the supplementary cost-of-living database that can be used to retrieve information required to implement PRD calculations</li> <li>parameters.defaults.RData - default parameters used elsewhere in the PRD calculations (such as number of school days, number of summer days etc)</li> <li>tables.RData - supplemental tables and crosswalks (e.g. SMIs, FPLs, state FIPS to state name mapping etc)</li> </ol> <p><strong>3. \"functions\" folder</strong></p> <p>Contains main Policy Rules Database functions written in R programming language. These functions read-in parameters from (1) and determine eligibility/calculate the dollar value of benefits for each program. </p> <p>The following files are located in this folder:</p> <ol> <li>benefits_functions.R - functions that read-in PRD parameters and determine eligibility/calculate value of benefits for each public assistance program and tax credit contained in the PRD</li> <li>expense_functions.R - functions that assign default expenses using Cost of Living Database</li> <li>BenefitsCalculator_functions.R - higher-level program that aggregates smaller functions into blocks (Expenses, Childcare, Healthcare, Food and Housing, Taxes and Tax Credits, Other Benefits) </li> </ol> <p><strong>4. applyBenefitsCalculator.R</strong></p> <p>High-level program that runs the Benfits Calculator in its entirety</p> <p><strong>5. libraries.R</strong></p> <p>Packages and libraries required to run example codes below</p> <p><strong>6. \"projects\" folder</strong></p> <p>YML files that are used to provide the specification for the PRD (i.e. specify the family demographics and benefits composition to run through the PRD). TEST.yml is then read-in by the applyBenefitsCalculator.R program and produces calculations</p> <p>To test changes/run PRD you can do the following:</p> <ol> <li>In projects folder, copy TEST.yml to YOUR_NAME.yml</li> <li>Open YOUR_NAME.yml file in any text editor; adust specifications as needed</li> <li>Open applyBenefitsCalculator.R; specify PROJECT object as YOUR_NAME</li> <li>Run the program. Results are saved to the \"output\" folder as results_YOUR_NAME.csv file</li> </ol> <p><strong>7. \"output\" folder</strong></p> <p>applyBenefitsCalculator.R program saves the resulted output into this folder</p> <p><strong>8. PRD Dashboard</strong></p> <p>The Policy Rules Database (PRD) Dashboard is a user-friendly visualization tool designed to provide comprehensive insights into how various public assistance programs and tax credits intersect to support families across different locations in the United States. </p> <h5>How to Use the Unit Test</h5> <p>A unit test is a way of testing the smallest piece of code that can be logically isolated in a system.</p> <p>These steps should be carried out only once:</p> <ol> <li>Execute the following command library(here)</li> <li>Create an object with the path where the files are downloaded.</li> </ol> <p>proj_dir &lt;-\"/Users/.....\"</p> <ol> <li>Execute the following command setwd(proj_dir)</li> <li>Execute the following command set_here()</li> <li>Close your R session</li> </ol> <p>To test the functions:</p> <p>Check the Readme file inside the folder tests</p> <p>TEST</p>"
        },
        "license": {
            "source": "https://github.com/FRB-Atlanta-Advancing-Careers/policy-rules-database/blob/main/LICENSE",
            "value": "<p>GNU General Public License v3.0</p>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"https://github.com/FRB-Atlanta-Advancing-Careers/policy-rules-database/blob/main/README.md\">https://github.com/FRB-Atlanta-Advancing-Careers/policy-rules-database/blob/main/README.md/</a>"
        },
        "user_changelog": {
            "source": null,
            "value": null
        },
        "user_changelog_recent": {
            "source": null,
            "value": null
        },
        "dev_changelog": {
            "source": null,
            "value": null
        },
        "disclaimer": {
            "source": null,
            "value": null
        },
        "user_case_studies": {
            "source": null,
            "value": null
        },
        "project_roadmap": {
            "source": null,
            "value": null
        },
        "contributor_overview": {
            "source": null,
            "value": null
        },
        "contributor_guide": {
            "source": null,
            "value": null
        },
        "governance_overview": {
            "source": null,
            "value": null
        },
        "public_funding": {
            "source": null,
            "value": null
        },
        "link_to_webapp": {
            "source": null,
            "value": "<a href=\"https://emar-data-tools.shinyapps.io/prd_dashboard/\">https://emar-data-tools.shinyapps.io/prd_dashboard/</a>"
        },
        "public_issue_tracker": {
            "source": null,
            "value": null
        },
        "public_qanda": {
            "source": null,
            "value": null
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li><a href=\"https://eliasilin.com\">Elias Ilin</a></li></ul><ul><li><a href=\"https://sites.google.com/view/ellieterry\">Ellie Terry</a></li></ul><ul><li><a href=\"https://www.atlantafed.org/economic-mobility-and-resilience/advancing-careers-for-low-income-families.aspx\">Atlanta Fed Advancing Careers Initiative</a></li></ul>"
        },
        "unit_test": {
            "source": null,
            "value": null
        },
        "integration_test": {
            "source": null,
            "value": null
        },
        "github_url": "https://github.com/FRB-Atlanta-Advancing-Careers/policy-rules-database"
    },
    "policyengine-uk": {
        "name": {
            "value": "policyengine-uk",
            "source": ""
        },
        "project_one_line": {
            "source": null,
            "value": "<p>PolicyEngine UK is a static microsimulation model of the UK Tax-Benefit system.</p>"
        },
        "project_overview": {
            "source": null,
            "value": "<a href=\"https://github.com/PolicyEngine/policyengine-uk\">What is PolicyEngine-UK?</a>"
        },
        "core_maintainers": {
            "source": null,
            "value": "<ul><li>Nikhil Woodruff</li><ul><li>email: nikhil@policyengine.org</li></ul>"
        },
        "user_documentation": {
            "source": null,
            "value": "<a href=\"https://policyengine.github.io/policyengine-uk/\"></a>"
        },
        "contributor_overview": {
            "source": null,
            "value": "<a href=\"https://github.com/PolicyEngine/PolicyEngine-uk\"></a>"
        },
        "user_changelog_recent": {
            "source": null,
            "value": "<a href=\"https://github.com/PSLmodels/policyengine-uk/blob/master/CHANGELOG.md\"></a>"
        },
        "link_to_webapp": {
            "source": null,
            "value": null
        },
        "github_url": "https://github.com/PolicyEngine/policyengine-uk"
    },
    "policyengine-us": {
        "name": "PolicyEngine US",
        "img": "https://github.com/PolicyEngine/policyengine-app/blob/master/src/images/logos/policyengine/banners/facebook.png?raw=true",
        "banner_title": "PolicyEngine US",
        "banner_subtitle": "A tax-benefit microsimulation model for the United States.",
        "detailed_description": "PolicyEngine US models rules for tax and benefit programs federally, in states, and in local governments. It also includes procedures to generate and enhance microdata for economic policy analysis.",
        "policy_area": "Policy Reform, Tax Analysis",
        "geography": "US",
        "language": "Python",
        "maintainers": [
            {
                "name": "Max Ghenis",
                "image": "https://policyengine.org/static/media/max-ghenis.536762d4b2439bf591f5.png",
                "link": "mailto:max@policyengine.org"
            }
        ],
        "links": {
            "code_repository": "https://github.com/policyengine/policyengine-us",
            "user_documentation": "https://policyengine.github.io/policyengine-us/",
            "contributor_documentation": "https://github.com/PolicyEngine/policyengine-us/blob/master/README.md",
            "webapp": "https://policyengine.org/us",
            "recent_changes": "https://github.com/PolicyEngine/policyengine-us/blob/master/CHANGELOG.md"
        },
        "github_url": "https://github.com/PolicyEngine/policyengine-us"
    },
    "Tax-Brain": {
        "name": "Tax-Brain",
        "img": "https://github.com/PSLmodels/Tax-Brain/blob/master/docs/taxbrain.png?raw=true",
        "banner_title": "Tax-Brain",
        "banner_subtitle": "A Python package that wraps multiple economic models in one easy to use interface",
        "detailed_description": "Tax-Brain makes it easy for users to simulate the US tax system by providing a single interface for multiple tax models. Currently, Tax-Brain interfaces with Tax-Calculator and Behavioral-Responses. Additional models will be added in the near future to expand Tax-Brain's capabilities to include modeling business taxation and running dynamic general equilibrium simulations.",
        "policy_area": "Tax Microsimulation, Revenue Estimation, Distributional Analysis",
        "geography": "United States",
        "language": "Python",
        "maintainers": [
            {
                "name": "Anderson Frailey",
                "image": "https://avatars.githubusercontent.com/u/20684675?v=4",
                "link": "https://github.com/andersonfrailey"
            }
        ],
        "links": {
            "code_repository": "https://github.com/PSLmodels/Tax-Brain",
            "user_documentation": "http://taxbrain.pslmodels.org/",
            "contributor_documentation": "http://taxbrain.pslmodels.org/content/contributing/contributor_guide.html",
            "webapp": "",
            "recent_changes": "https://github.com/PSLmodels/Tax-Brain/blob/master/RELEASES.md"
        },
        "github_url": "https://github.com/PSLmodels/Tax-Brain"
    },
    "Tax-Calculator": {
        "name": "Tax-Calculator",
        "img": "",
        "banner_title": "Tax-Calculator",
        "banner_subtitle": "USA Federal Individual Income and Payroll Tax Microsimulation Model",
        "detailed_description": "Tax-Calculator is an open-source microsimulation model for static analysis of USA federal income and payroll taxes.",
        "policy_area": "Tax Microsimulation, Revenue Estimation, Distributional Analysis",
        "geography": "United States",
        "language": "Python",
        "maintainers": [
            {
                "name": "Jason DeBacker",
                "image": "https://github.com/jdebacker.png",
                "link": "https://github.com/jdebacker"
            },
            {
                "name": "Matthew Jensen",
                "image": "https://avatars.githubusercontent.com/u/8301092?v=4",
                "link": "https://github.com/MattHJensen/"
            }
        ],
        "links": {
            "code_repository": "https://github.com/PSLmodels/Tax-Calculator",
            "user_documentation": "https://taxcalc.pslmodels.org/",
            "contributor_documentation": "https://taxcalc.pslmodels.org/contributing/contributor_guide.html",
            "webapp": "",
            "recent_changes": "https://taxcalc.pslmodels.org/about/releases.html"
        },
        "github_url": "https://github.com/PSLmodels/Tax-Calculator"
    },
    "Tax-Cruncher": {
        "name": "Tax-Cruncher",
        "img": "",
        "banner_title": "Tax-Cruncher",
        "banner_subtitle": "",
        "detailed_description": "Calculates federal tax liabilities from individual data under a range of policy scenarios.",
        "policy_area": "Tax Microsimulation, Revenue Estimation, Distributional Analysis",
        "geography": "United States",
        "language": "Python",
        "maintainers": [
            {
                "name": "Peter Metz",
                "image": "https://avatars.githubusercontent.com/u/43755005?v=4",
                "link": "https://github.com/Peter-Metz"
            }
        ],
        "links": {
            "code_repository": "https://github.com/PSLmodels/tax-cruncher",
            "user_documentation": "https://github.com/PSLmodels/Tax-Cruncher/blob/master/docs/Introduction-to-Tax-Cruncher.pdf",
            "contributor_documentation": "",
            "webapp": "",
            "recent_changes": "https://github.com/PSLmodels/Tax-Cruncher/releases"
        },
        "github_url": "https://github.com/PSLmodels/Tax-Cruncher"
    },
    "taxdata": {
        "name": "taxdata",
        "img": "",
        "banner_title": "taxdata",
        "banner_subtitle": "A Python package to prepare tax microsimulation data",
        "detailed_description": "The TaxData project prepares microdata for use with the Tax-Calculator microsimulation project.",
        "policy_area": "Tax Microsimulation, Revenue Estimation, Distributional Analysis",
        "geography": "United States",
        "language": "Python",
        "maintainers": [
            {
                "name": "Anderson Frailey",
                "image": "https://avatars.githubusercontent.com/u/20684675?v=4",
                "link": "https://github.com/andersonfrailey"
            }
        ],
        "links": {
            "code_repository": "https://github.com/PSLmodels/taxdata",
            "user_documentation": "http://pslmodels.github.io/taxdata/",
            "contributor_documentation": "http://pslmodels.github.io/taxdata/content/contributing/CONTRIBUTING.html",
            "webapp": "",
            "recent_changes": "https://github.com/PSLmodels/taxdata/releases"
        },
        "github_url": "https://github.com/PSLmodels/taxdata"
    }
}